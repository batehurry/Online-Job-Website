<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- 不拦截doc内的html文件 -->
	<mvc:resources location="/doc/" mapping="/doc/**"/>

	<!-- 通过component-scan 让Spring扫描controller下的所有的类，让Spring的代码注解生效 -->
	<!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->
	<!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->
	<context:component-scan base-package="com.qzw.contrllor">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 开启aop，对类代理 -->
	<aop:config proxy-target-class="true"></aop:config>
	
	<!-- 开启shiro注解支持 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置 mvc:annotation-driven默认加载很多的参数绑定方法， 比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter 实际开发时使用mvc:annotation-driven -->
	<!-- <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven> -->

	<!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
	<!-- <mvc:annotation-driven/> -->

	<mvc:annotation-driven conversion-service="conversionService" validator="validator">
		<mvc:message-converters register-defaults="true">
			<!-- 配置Fastjson支持 -->
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				<!-- <property name="features"> <list> <value>WriteMapNullValue</value> <value>WriteNullStringAsEmpty</value> </list> </property> -->
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- fastjson与SpringMVC整合 -->
	<!-- 1)若按照jackson和SpringMVC的整合方式,应按照下面的写法,但测试发现这样会报告"HTTP Status 406" The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request "accept" headers. 2)测试通过的整合方式为上面那样在mvc:annotation-driven里面进行注册 3)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6 否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串 4)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的 因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了 如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8] 5)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java 它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等 QuoteFieldNames：输出key时是否使用双引号,默认为true WriteMapNullValue：是否输出值为null的字段,默认为false WriteNullNumberAsZero：数值字段如果为null,输出为0,而非null WriteNullListAsEmpty：List字段如果为null,输出为[],而非null 
		WriteNullStringAsEmpty：字符类型字段如果为null,输出为"",而非null WriteNullBooleanAsFalse：Boolean字段如果为null,输出为false,而非null 6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames 这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段 7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty 经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串 -->


	<!-- 配置SpringMVC的视图渲染器， 让其前缀为:/page 后缀为.jsp 将视图渲染到/page/<method返回值>.jsp中 -->
	<!-- 配置SpringMVC的视图解析器 -->
	<!-- 其viewClass属性的默认值就是org.springframework.web.servlet.view.JstlView -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 全局异常处理器 只要实现HandlerExceptionResolver接口就是全局异常处理器 -->
	<bean class="com.qzw.exception.CustomExceptionResolver"></bean>

	<!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->
	<!-- <mvc:view-controller path="/WEB-INF/view/" view-name="index.jsp" /> -->

	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
	<!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
	<!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
	<!-- <mvc:resources mapping="/js/**" location="/resources/js/"/> <mvc:resources mapping="/css/**" location="/resources/css/"/> <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/> -->

	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error.html</prop>
				<!-- 处理其它异常(包括Controller抛出的) -->
				<prop key="java.lang.Throwable">500.html</prop>
			</props>
		</property>
	</bean>

	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 字符集拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.qzw.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.qzw.contrllor.converter.DateConverter" />
				<!-- Integer类型转换 -->
				<bean class="com.qzw.contrllor.converter.IntegerConverter" />
				<!-- Long类型转换 -->
				<bean class="com.qzw.contrllor.converter.LongConverter" />
				<!-- Float类型转换 -->
				<bean class="com.qzw.contrllor.converter.FloatConverter" />
				<!-- Double类型转换 -->
				<bean class="com.qzw.contrllor.converter.DoubleConverter" />
			</list>
		</property>
	</bean>

	<!-- 校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validationMessageSource" />
	</bean>

	<!-- 校验错误信息配置文件 -->
	<bean id="validationMessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:validationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

</beans>